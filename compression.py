# ============================== #
# GÃ–RSEL SIKIÅžTIRMA ARACI        #
# RL destekli JPEG kalite ayarÄ±  #
# ============================== #

import os
import time
import tempfile
import psutil
import requests
import io
import numpy as np
from PIL import Image
from skimage.metrics import peak_signal_noise_ratio as psnr, structural_similarity as ssim
import streamlit as st
from stable_baselines3 import PPO  # PPO tabanlÄ± RL ajanÄ±nÄ± yÃ¼klemek iÃ§in

# ------------------------------------------------------------------------------
# COCO Ã¶rnek gÃ¶rsellerinin URL listesi
# Bunlar test amaÃ§lÄ± kullanÄ±lacak, HUFFMAN/JPEG/RL destekli JPEG sÄ±kÄ±ÅŸtÄ±rmalarÄ±na tabii tutulacak.
# ------------------------------------------------------------------------------
COCO_SAMPLE_URLS = [
    "https://images.cocodataset.org/val2017/000000000139.jpg",
    "https://images.cocodataset.org/val2017/000000000632.jpg",
    "http://farm9.staticflickr.com/8488/8248903344_de9d38205c_z.jpg"
]

# ------------------------------------------------------------------------------
# COCO gÃ¶rsellerini indir ve bellekte tut
# - Cache kullanÄ±mÄ± tekrar indirmenin Ã¶nÃ¼ne geÃ§er (Streamlit cache_data)
# - RGB formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r
# ------------------------------------------------------------------------------
@st.cache_data
def download_images():
    images = []
    image_bytes_list = []
    for url in COCO_SAMPLE_URLS:
        response = requests.get(url, verify=False)  # GÃ¼venlik sertifikasÄ± yoksa bile al
        image_bytes = response.content
        img = Image.open(io.BytesIO(image_bytes)).convert("RGB")  # RGB: 3 kanal
        images.append(img)
        image_bytes_list.append(len(image_bytes))  # Orijinal boyutu byte cinsinden sakla
    return images, image_bytes_list

# ------------------------------------------------------------------------------
# GÃ¶rseli orantÄ±lÄ± ÅŸekilde yeniden boyutlandÄ±r
# - Maksimum boyut 256x256 olacak ÅŸekilde orantÄ±yÄ± koruyarak kÃ¼Ã§Ã¼lt
# ------------------------------------------------------------------------------
def resize_image_keep_aspect(img, max_size=(256, 256)):
    img_copy = img.copy()
    img_copy.thumbnail(max_size, Image.LANCZOS)  # LANCZOS = yÃ¼ksek kaliteli kÃ¼Ã§Ã¼ltme
    return img_copy

# ------------------------------------------------------------------------------
# PNG formatÄ±nda Huffman tabanlÄ± sÄ±kÄ±ÅŸtÄ±rma uygula
# - PNG lossless (kayÄ±psÄ±z) sÄ±kÄ±ÅŸtÄ±rma yapar
# - Bellek, zaman, kalite Ã¶lÃ§Ã¼mleri dÃ¶ner
# ------------------------------------------------------------------------------
def compress_huffman(img_pil):
    t0 = time.time()
    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp:
        img_pil.save(tmp.name, format="PNG", optimize=True)
        comp_path = tmp.name
    t1 = time.time()

    comp_img = Image.open(comp_path).convert("RGB")  # SÄ±kÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ gÃ¶rseli geri yÃ¼kle
    decode_time = time.time() - t1  # AÃ§ma (decoding) sÃ¼resi

    orig_bytes = img_pil.tobytes()  # Ham RGB verisi
    comp_size = os.path.getsize(comp_path)  # PNG dosya boyutu

    return {
        "Method": "Huffman (PNG)",
        "CompressionRatio": len(orig_bytes) / comp_size,
        "TimeEncode": t1 - t0,
        "TimeDecode": decode_time,
        "MemoryEncode_MB": psutil.Process().memory_info().rss / (1024 * 1024),
        "MemoryDecode_MB": psutil.Process().memory_info().rss / (1024 * 1024),
        "PSNR": psnr(np.array(img_pil), np.array(comp_img)),  # GÃ¶rsel kalite metriÄŸi
        "SSIM": ssim(np.array(img_pil), np.array(comp_img), channel_axis=2),  # YapÄ±sal benzerlik
        "CompressedImage": comp_img,
        "CompressedSizeBytes": comp_size
    }

# ------------------------------------------------------------------------------
# JPEG sÄ±kÄ±ÅŸtÄ±rma iÅŸlemi (RL ajanÄ± ile veya manuel kalite ile (default 75))
# - isRL=True olduÄŸunda ajana ait etiketleme yapÄ±lÄ±r
# ------------------------------------------------------------------------------
def compress_jpeg(img_pil, quality=75, isRL=False):
    t0 = time.time()
    with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        img_pil.save(tmp.name, format="JPEG", quality=quality, optimize=True)
        comp_path = tmp.name
    t1 = time.time()

    comp_img = Image.open(comp_path).convert("RGB")
    decode_time = time.time() - t1

    orig_bytes = img_pil.tobytes()
    comp_size = os.path.getsize(comp_path)

    return {
        "Method": f"{'RL Agent' if isRL else 'JPEG'} (q={quality})",
        "CompressionRatio": len(orig_bytes) / comp_size,
        "TimeEncode": t1 - t0,
        "TimeDecode": decode_time,
        "MemoryEncode_MB": psutil.Process().memory_info().rss / (1024 * 1024),
        "MemoryDecode_MB": psutil.Process().memory_info().rss / (1024 * 1024),
        "PSNR": psnr(np.array(img_pil), np.array(comp_img)),
        "SSIM": ssim(np.array(img_pil), np.array(comp_img), channel_axis=2),
        "CompressedImage": comp_img,
        "CompressedSizeBytes": comp_size
    }

# ------------------------------------------------------------------------------
# EÄŸittiÄŸim RL modelini yÃ¼kler
# - Bu ajan, JPEG kalite seviyesini tahmin etmek iÃ§in eÄŸitildi
# ------------------------------------------------------------------------------
agent = PPO.load("jpeg_rl_agent_optimized3.zip")

# ------------------------------------------------------------------------------
# RL ajanÄ±n kullanacaÄŸÄ± formatta gÃ¶zlem Ã¼ret (Ã¶n iÅŸlem)
# - GÃ¶rsel 64x64'e kÃ¼Ã§Ã¼ltÃ¼lÃ¼r ve normalleÅŸtirilir
# - RGB kanallarÄ± (CHW) ÅŸeklinde dÃ¶ner
# ------------------------------------------------------------------------------
def preprocess_image(img_pil):
    img_resized = img_pil.resize((64, 64))  # EÄŸitim boyutu
    img_array = np.array(img_resized) / 255.0  # Normalize et (0-1)
    obs = img_array.transpose(2, 0, 1)  # Kanal Ã¶nce olacak ÅŸekilde transpoze et (CHW)
    return obs

# ------------------------------------------------------------------------------
# RL ajanÄ± ile JPEG sÄ±kÄ±ÅŸtÄ±rma
# - GÃ¶rsel girdisine gÃ¶re uygun kalite seviyesini tahmin eder
# - Tahmin edilen kalite ile sÄ±kÄ±ÅŸtÄ±rmayÄ± uygular
# ------------------------------------------------------------------------------
def compress_jpeg_rl(img_pil):
    obs = preprocess_image(img_pil)
    action, _ = agent.predict(obs, deterministic=True)  # Kalite seviyesini tahmin et
    quality = 5 + 5 * int(action)  # 0â€“18 -> 5, 10, 15, ..., 95
    return compress_jpeg(img_pil, quality=quality, isRL=True)

# ------------------------------------------------------------------------------
# Byte deÄŸerlerini insan tarafÄ±ndan okunabilir hale getir (KB, MB, ...)
# ------------------------------------------------------------------------------
def format_bytes(size_bytes):
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size_bytes < 1024:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.1f} TB"

# ------------------------------------------------------------------------------
# Streamlit arayÃ¼zÃ¼nÃ¼n ana uygulama fonksiyonu
# - TÃ¼m gÃ¶rseller iÃ§in sÄ±kÄ±ÅŸtÄ±rmalarÄ± uygular ve karÅŸÄ±laÅŸtÄ±rmalÄ± olarak sunar
# ------------------------------------------------------------------------------
def main():
    st.title("ðŸ“¦ GÃ¶rsel SÄ±kÄ±ÅŸtÄ±rma YÃ¶ntemleri KarÅŸÄ±laÅŸtÄ±rmasÄ± (RL Destekli)")

    images, original_sizes = download_images()

    for idx, (img, orig_size) in enumerate(zip(images, original_sizes)):
        st.header(f"ðŸ“· GÃ¶rsel {idx+1}")
        st.markdown("**Orijinal GÃ¶rsel**")
        st.image(img, caption=f"Orijinal GÃ¶rsel - {format_bytes(orig_size)}", use_container_width=True)

        # SÄ±kÄ±ÅŸtÄ±rma yÃ¶ntemleri uygulanÄ±r
        results = [
            compress_huffman(img),
            compress_jpeg(img, quality=75),
            compress_jpeg_rl(img)
        ]

        # SÄ±kÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ gÃ¶rselleri gÃ¶ster
        st.markdown("### ðŸ”§ SÄ±kÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ GÃ¶rseller")
        cols = st.columns(len(results))
        for col, res in zip(cols, results):
            col.markdown(f"**{res['Method']}**")
            comp_img_resized = resize_image_keep_aspect(res["CompressedImage"])
            col.image(comp_img_resized, use_container_width=True)
            col.markdown(f"`{format_bytes(res['CompressedSizeBytes'])}`")

        # SayÄ±sal karÅŸÄ±laÅŸtÄ±rma tablosu
        st.markdown("### ðŸ“Š KarÅŸÄ±laÅŸtÄ±rma Tablosu")
        for r in results:
            r.pop("CompressedImage", None)
            r.pop("CompressedSizeBytes", None)
        st.table(results)

# ------------------------------------------------------------------------------
# Uygulama baÅŸlatma
# ------------------------------------------------------------------------------
if __name__ == "__main__":
    main()
